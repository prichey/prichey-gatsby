{"version":3,"sources":["webpack:///path---projects-personal-rotten-trumpatoes-65ccd75302a4eb320de8.js","webpack:///./.cache/json/projects-personal-rotten-trumpatoes.json"],"names":["webpackJsonp","357","module","exports","data","markdownRemark","html","frontmatter","title","link","repo","zoom","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,8zMAA+mMC,aAAiUC,MAAA,oBAAAC,KAAA,gCAAAC,KAAA,8CAAAC,MAAA,KAAsIC,aAAgBC,KAAA","file":"path---projects-personal-rotten-trumpatoes-65ccd75302a4eb320de8.js","sourcesContent":["webpackJsonp([240978500024994],{\n\n/***/ 357:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Like all great ideas, it started with a tweet.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Every morning I wake up and check if Trump is polling higher or lower than the movie Suicide Squad. Itâ€™s getting close. <a href=\\\"https://t.co/f9O9NcuUPz\\\">pic.twitter.com/f9O9NcuUPz</a></p>&mdash; PJ Vogt (@PJVogt) <a href=\\\"https://twitter.com/PJVogt/status/895824447113842689?ref_src=twsrc%5Etfw\\\">August 11, 2017</a></blockquote>\\n<p>In an era where everything is rated, from movies to restaurants to <a href=\\\"https://thewirecutter.com/reviews/best-fidget-spinners/\\\" target=\\\"_blank\\\">fidget spinners</a>, there was something really amusing about comparing apples and oranges, as it were: this brunch spot is about as popular as that pair of headphones; this album is about as popular as that Airbnb host, etc. So, I set out to find a movie that is doing about as well as the president.</p>\\n<p>First, I had to figure out how well the president is actually doing. Picking a single one from the tens (maybe hundreds) of different polls, indexes, and surveys turned out to be an impossible task, so I chose the calculations of <a href=\\\"http://fivethirtyeight.com/\\\" target=\\\"_blank\\\">FiveThirtyEight</a>, which seem to be <a href=\\\"http://fivethirtyeight.com/features/how-were-tracking-donald-trumps-approval-ratings/\\\" target=\\\"_blank\\\">well reasoned</a> and attempt to account for all other major polls, with each of those scores weighted based on <a href=\\\"https://projects.fivethirtyeight.com/pollster-ratings/\\\" target=\\\"_blank\\\">historical accuracy</a>. FiveThirtyEight also updates their rating multiple times a day, which allows for more varied results, which in turn make for a more interesting web experience (since if you check the page at multiple times of the day, the results might differ).</p>\\n<p>Next, I tackled the problem of building up a database of movies with their corresponding <a href=\\\"https://www.rottentomatoes.com/\\\" target=\\\"_blank\\\">Rotten Tomatoes</a> ratings. The only problem is, there isn't a publicly accessible API for this information. There is a <a href=\\\"https://developer.fandango.com/Rotten_Tomatoes\\\" target=\\\"_blank\\\">private API</a> which developers can apply to access (and I did), but almost 4 months after submitting the application, I still haven't heard anything back. With further googling, I found two API's that I combined to do the job: <a href=\\\"https://www.themoviedb.org/\\\" target=\\\"_blank\\\">The Movie DB</a>, which offers a free <a href=\\\"https://www.themoviedb.org/documentation/api\\\" target=\\\"_blank\\\">API</a> with a <code>/discover</code> endpoint that yields lists of popular movies, but <em>doesn't</em> include the RT rating, and <a href=\\\"http://www.omdbapi.com/\\\" target=\\\"_blank\\\">The Open Movie Database</a> (OMDb), which doesn't provide any sort of <code>/discover</code> feature, but <em>does</em> include the RT rating for specific movies.</p>\\n<p>While FiveThirtyEight gives a rating to the tenth (e.g. 38.7%), RT deals in integers, so I knew I'd have to gather enough movies to cover each possible rating, 0% - 100. (In reality, there's never going to be anywhere near total consensus, so it's unlikely that some movies will be used, but hey, with this President you never know.) I also wanted to have enough for each rating that the results were varied, and you could come back to the site and get different results each time. I ended up building a <a href=\\\"https://github.com/prichey/rottentrumpatoes/blob/master/movies.json\\\" target=\\\"_blank\\\">database</a> of over 1,800 movies, each with a title, year, RT rating, number of IMDB ratings, and poster image. I ignore movies from this year, since their rating may not be stable yet. Then, for each rating, I select the 20 movies with the most ratings on IMDB (even if a movie is 'bad', movies with the most reviews are more likely to be recognizable), and provide one at random that matches the president's current rating (which is updated every hour).</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/index-7601f7013f860890678f153a70311429.png\\\" alt=\\\"Rotten Trumpatoes\\\" title=\\\"Rotten Trumpatoes\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>While not publicly accessible, I created a way to manage movies in the DB which allowed me to remove movies from consideration, as well as merely to examine the huge list of movies I created. I decided to remove some movies from the DB that were either unknown, in poor taste, or just weren't funny. Since my database was a huge JSON file, it was nearly impossible to view in a text editor, but viewing the top results via this interface turned out to be very useful.</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/movies-a95e76c6c205585060aa5aa2f38d8914.png\\\" alt=\\\"Movies Interface\\\" title=\\\"Movies Interface\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>I also made an interface for scraping, which allows you to specify the specific pages of the TMDb <code>/discover</code> endpoint to scrape (useful if the app crashes, which of course it never did). Using <code>socket.io</code> I streamed the server results in realtime to the client, so that you can follow along and see progress as the scraper runs, which is helpful as I let it run over the course of 10+ hours.</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/scrape-c5f8783121f82694e996cabea6fc4a07.png\\\" alt=\\\"Scraping Interface\\\" title=\\\"Scraping Interface\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>I learned a lot working on this project. I combined several disparate API's (at least 4, by my count), as well as brushed up my scraping skills (most of it done with Google's newish <a href=\\\"https://github.com/GoogleChrome/puppeteer\\\" target=\\\"_blank\\\">Puppeteer</a>, which turned out to be a blast to use). After more than a month of working evenings and weekends, I launched the site (via tweet, of course), which, to my surprise, was retweeted by PJ, the originator of the initial idea.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">I&#39;ve spent the last few weekends working on a thing and I&#39;m ready to be done with it, so here you go: <a href=\\\"https://t.co/XiRh1HsdaU\\\">https://t.co/XiRh1HsdaU</a> ðŸŽˆ</p>&mdash; Preston Richey (@prestonrichey) <a href=\\\"https://twitter.com/prestonrichey/status/912454228622397440?ref_src=twsrc%5Etfw\\\">September 25, 2017</a></blockquote>\\n<p>All art direction for Rotten Trumpatoes was done by <a href=\\\"http://www.tanyakarpitskiy.com/\\\" target=\\\"_blank\\\">Tanya Karpitskiy</a>.</p>\",\"frontmatter\":{\"title\":\"Rotten Trumpatoes\",\"link\":\"https://rottentrumpatoes.com/\",\"repo\":\"https://github.com/prichey/rottentrumpatoes\",\"zoom\":true}}},\"pathContext\":{\"slug\":\"/projects/personal/rotten-trumpatoes/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---projects-personal-rotten-trumpatoes-65ccd75302a4eb320de8.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Like all great ideas, it started with a tweet.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Every morning I wake up and check if Trump is polling higher or lower than the movie Suicide Squad. Itâ€™s getting close. <a href=\\\"https://t.co/f9O9NcuUPz\\\">pic.twitter.com/f9O9NcuUPz</a></p>&mdash; PJ Vogt (@PJVogt) <a href=\\\"https://twitter.com/PJVogt/status/895824447113842689?ref_src=twsrc%5Etfw\\\">August 11, 2017</a></blockquote>\\n<p>In an era where everything is rated, from movies to restaurants to <a href=\\\"https://thewirecutter.com/reviews/best-fidget-spinners/\\\" target=\\\"_blank\\\">fidget spinners</a>, there was something really amusing about comparing apples and oranges, as it were: this brunch spot is about as popular as that pair of headphones; this album is about as popular as that Airbnb host, etc. So, I set out to find a movie that is doing about as well as the president.</p>\\n<p>First, I had to figure out how well the president is actually doing. Picking a single one from the tens (maybe hundreds) of different polls, indexes, and surveys turned out to be an impossible task, so I chose the calculations of <a href=\\\"http://fivethirtyeight.com/\\\" target=\\\"_blank\\\">FiveThirtyEight</a>, which seem to be <a href=\\\"http://fivethirtyeight.com/features/how-were-tracking-donald-trumps-approval-ratings/\\\" target=\\\"_blank\\\">well reasoned</a> and attempt to account for all other major polls, with each of those scores weighted based on <a href=\\\"https://projects.fivethirtyeight.com/pollster-ratings/\\\" target=\\\"_blank\\\">historical accuracy</a>. FiveThirtyEight also updates their rating multiple times a day, which allows for more varied results, which in turn make for a more interesting web experience (since if you check the page at multiple times of the day, the results might differ).</p>\\n<p>Next, I tackled the problem of building up a database of movies with their corresponding <a href=\\\"https://www.rottentomatoes.com/\\\" target=\\\"_blank\\\">Rotten Tomatoes</a> ratings. The only problem is, there isn't a publicly accessible API for this information. There is a <a href=\\\"https://developer.fandango.com/Rotten_Tomatoes\\\" target=\\\"_blank\\\">private API</a> which developers can apply to access (and I did), but almost 4 months after submitting the application, I still haven't heard anything back. With further googling, I found two API's that I combined to do the job: <a href=\\\"https://www.themoviedb.org/\\\" target=\\\"_blank\\\">The Movie DB</a>, which offers a free <a href=\\\"https://www.themoviedb.org/documentation/api\\\" target=\\\"_blank\\\">API</a> with a <code>/discover</code> endpoint that yields lists of popular movies, but <em>doesn't</em> include the RT rating, and <a href=\\\"http://www.omdbapi.com/\\\" target=\\\"_blank\\\">The Open Movie Database</a> (OMDb), which doesn't provide any sort of <code>/discover</code> feature, but <em>does</em> include the RT rating for specific movies.</p>\\n<p>While FiveThirtyEight gives a rating to the tenth (e.g. 38.7%), RT deals in integers, so I knew I'd have to gather enough movies to cover each possible rating, 0% - 100. (In reality, there's never going to be anywhere near total consensus, so it's unlikely that some movies will be used, but hey, with this President you never know.) I also wanted to have enough for each rating that the results were varied, and you could come back to the site and get different results each time. I ended up building a <a href=\\\"https://github.com/prichey/rottentrumpatoes/blob/master/movies.json\\\" target=\\\"_blank\\\">database</a> of over 1,800 movies, each with a title, year, RT rating, number of IMDB ratings, and poster image. I ignore movies from this year, since their rating may not be stable yet. Then, for each rating, I select the 20 movies with the most ratings on IMDB (even if a movie is 'bad', movies with the most reviews are more likely to be recognizable), and provide one at random that matches the president's current rating (which is updated every hour).</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/index-7601f7013f860890678f153a70311429.png\\\" alt=\\\"Rotten Trumpatoes\\\" title=\\\"Rotten Trumpatoes\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>While not publicly accessible, I created a way to manage movies in the DB which allowed me to remove movies from consideration, as well as merely to examine the huge list of movies I created. I decided to remove some movies from the DB that were either unknown, in poor taste, or just weren't funny. Since my database was a huge JSON file, it was nearly impossible to view in a text editor, but viewing the top results via this interface turned out to be very useful.</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/movies-a95e76c6c205585060aa5aa2f38d8914.png\\\" alt=\\\"Movies Interface\\\" title=\\\"Movies Interface\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>I also made an interface for scraping, which allows you to specify the specific pages of the TMDb <code>/discover</code> endpoint to scrape (useful if the app crashes, which of course it never did). Using <code>socket.io</code> I streamed the server results in realtime to the client, so that you can follow along and see progress as the scraper runs, which is helpful as I let it run over the course of 10+ hours.</p>\\n<div class=\\\"blog-inset\\\">\\n<img src=\\\"/scrape-c5f8783121f82694e996cabea6fc4a07.png\\\" alt=\\\"Scraping Interface\\\" title=\\\"Scraping Interface\\\" data-action=\\\"zoom\\\"/>\\n</div>\\n<p>I learned a lot working on this project. I combined several disparate API's (at least 4, by my count), as well as brushed up my scraping skills (most of it done with Google's newish <a href=\\\"https://github.com/GoogleChrome/puppeteer\\\" target=\\\"_blank\\\">Puppeteer</a>, which turned out to be a blast to use). After more than a month of working evenings and weekends, I launched the site (via tweet, of course), which, to my surprise, was retweeted by PJ, the originator of the initial idea.</p>\\n<blockquote class=\\\"twitter-tweet\\\" data-cards=\\\"hidden\\\" data-lang=\\\"en\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">I&#39;ve spent the last few weekends working on a thing and I&#39;m ready to be done with it, so here you go: <a href=\\\"https://t.co/XiRh1HsdaU\\\">https://t.co/XiRh1HsdaU</a> ðŸŽˆ</p>&mdash; Preston Richey (@prestonrichey) <a href=\\\"https://twitter.com/prestonrichey/status/912454228622397440?ref_src=twsrc%5Etfw\\\">September 25, 2017</a></blockquote>\\n<p>All art direction for Rotten Trumpatoes was done by <a href=\\\"http://www.tanyakarpitskiy.com/\\\" target=\\\"_blank\\\">Tanya Karpitskiy</a>.</p>\",\"frontmatter\":{\"title\":\"Rotten Trumpatoes\",\"link\":\"https://rottentrumpatoes.com/\",\"repo\":\"https://github.com/prichey/rottentrumpatoes\",\"zoom\":true}}},\"pathContext\":{\"slug\":\"/projects/personal/rotten-trumpatoes/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/projects-personal-rotten-trumpatoes.json\n// module id = 357\n// module chunks = 240978500024994"],"sourceRoot":""}